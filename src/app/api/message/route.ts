import { chatbotPrompt } from "@/helpers/constants/chatbot-prompt";
import { MessageArraySchema } from "@/lib/validators/message";
import OpenAIStream from "@/lib/openai-stream";
import {
  ChatCompletionResponseMessage,
  CreateChatCompletionRequest,
} from "openai";

export async function POST(req: Request, res: Response) {
  const { messages } = await req.json();
  /**
   * `MessageArraySchema.parse(message)` is parsing the `message` object received in the request body using the
   * `MessageArraySchema` validator.
   * If the `message` object does not conform to the schema, an error will be thrown.
   */
  const parsedMessages = MessageArraySchema.parse(messages);
  /**
   * This code is creating an array of `ChatGPTMessage` objects called `outbountMessage`.
   * It is using the `map()` method to iterate over each message in the `parsedMessages` array and create a new `ChatGPTMessage` object
   * for each one.
   */
  const outboundMessages: ChatCompletionResponseMessage[] = parsedMessages.map(
    (message) => ({
      role: message.isUserMessage ? "user" : "system",
      content: message.text,
    })
  );
  /**
   * `outbountMessages.unshift()` is adding a new `ChatGPTMessage` object to the beginning of the `outbountMessages` array.
   * This new message has a `role` of "system" and a `content` of `chatbotPrompt`, which is a constant that likely contains a prompt or
   * greeting for the chatbot.
   * This ensures that the chatbot's initial message is always the first message in the conversation.
   * Example: [4, 5, 6] -> After Unshift [1, 2, 3, 4, 5, 6]
   */
  outboundMessages.unshift({
    role: "system",
    content: chatbotPrompt,
  });
  /**
   * This contains various properties used to configure and send a request to the OpenAI API.
   * @see https://platform.openai.com/docs/guides/chat/response-format
   */
  const payload: CreateChatCompletionRequest = {
    model: "gpt-3.5-turbo",
    messages: outboundMessages,
    temperature: 0.4,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
    max_tokens: 150,
    stream: true,
    n: 1,
  };
  /**
   * The `OpenAIStream` function is a custom function that handles the API request andresponse using a streaming approach.
   */
  const stream: ReadableStream<Uint8Array> = await OpenAIStream(payload);
  /**
   * This is the response that will be sent back to the client that made the request.
   * The response object takes @param {ReadableStream<Uint8Array>} stream as the parameter
   * The `stream` is a stream of chat messages generated by the OpenAI API in response to the messages sent by the client.
   * By returning this stream in the response, the client can receive and display the chat messages in real-time as they are generated by
   * the chatbot.
   */
  return new Response(stream);
}
